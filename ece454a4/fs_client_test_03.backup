#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ece454_fs.h"

void printBuf(char *buf, int size) {
    /* Should match the output from od -x */
    int i;
    for(i = 0; i < size; ) {
	if(i%16 == 0) {
	    printf("%08o ", i);
	}

	int j;
	for(j = 0; j < 16;) {
	    int k;
	    for(k = 0; k < 2; k++) {
		if(i+j+(1-k) < size) {
		    printf("%02x", (unsigned char)(buf[i+j+(1-k)]));
		}
	    }

	    printf(" ");
	    j += k;
	}

	printf("\n");
	i += j;
    }
}

int main(int argc, char *argv[]) {
    if(argc < 4) {
	fprintf(stderr, "usage: %s <srv-ip/name> <srv-port> <local dir name>\n", argv[0]);
	exit(1);
    }

    printf ("\n\n\n\nenter main fs_client \n. ***********\n test case involves mounting  3 server alias, opendir 3 aliases  and unmount 3 server alias \n");

    char *dirname = argv[3];
    printf("fsMount(): %d\n", fsMount(argv[1], atoi(argv[2]), dirname));
    printf("fsMount(): - folderAlsia %d\n", fsMount(argv[1],atoi(argv[2]), "folderAlias"));
    printf("fsMount(): - ../exFolder %d\n", fsMount(argv[1],atoi(argv[2]), "../exFolder"));
    
    FSDIR *fd = fsOpenDir(dirname);
    //printf("client app, returned fd-> num is: %i\n",fd->num) ;
    if(fd == NULL) {
	perror("fsOpenDir"); exit(1);
    }
    printf ("successfully opened dir with id of FSDIR: %i \n",fd->num);
     
    FSDIR *fd2 = fsOpenDir("folderAlias/apples/");
    //printf("client app, -- testin second open returned fd-> num is: %i\n",fd2->num) ;
    if(fd2 == NULL) {
	perror("fsOpenDir For second failed"); exit(1);
    }
    printf ("successfully opened dir with id of FSDIR: %i \n",fd2->num);
   
    FSDIR *fd3 = fsOpenDir("../exFolder/apples/bananas/");
    if(fd3 == NULL) {
         perror("fsOpenDir exFolder/apples/bananas failed \n");exit(1);
    }
    printf ("successfully oepened bananas dir with id of FSDIR : %i \n",fd3->num);


    printf ("\t now checking fsDirent part\n");
    struct fsDirent *fdent = NULL;
    printf("client app, fd->num is : %i\n",fd->num);
    for(fdent = fsReadDir(fd); fdent != NULL; fdent = fsReadDir(fd)) {
	printf("\t %s, %d\n", fdent->entName, (int)(fdent->entType));
    }

    if(errno != 0) {
	perror("fsReadDir");
    }

    printf("fsCloseDir(): %d\n", fsCloseDir(fd));
    struct fsDirent *fdent2 = NULL;
    printf("client app, fd2->num is : %i\n",fd2->num);
    for(fdent2 = fsReadDir(fd2); fdent2 != NULL; fdent2 = fsReadDir(fd2)) {
	printf("\t %s, %d\n", fdent2->entName, (int)(fdent2->entType));
    }

    if(errno != 0) {
	perror("fsReadDir");
    }

    printf("fsCloseDir(): %d\n", fsCloseDir(fd2));
    
    struct fsDirent *fdent3 = NULL;
    printf("client app, fd3->num is : %i\n",fd3->num);
    for(fdent3 = fsReadDir(fd3); fdent3 != NULL; fdent3 = fsReadDir(fd3)) {
	printf("\t %s, %d\n", fdent3->entName, (int)(fdent3->entType));
    }

    if(errno != 0) {
	perror("fsReadDir");
    }

    printf("fsCloseDir(): %d\n", fsCloseDir(fd3));
    printf("fsUnmount(): folderAlias %i\n",fsUnmount("folderAlias"));
    printf("fsUnmount(): ../exFolder/ %i\n",fsUnmount("../exFolder"));
   printf("fsUnmount(): dirFolder entered %i \n",fsUnmount(dirname));
    //printf("fsUnmount(): %s\n",dirname,fsUnmount(dirname));    
    //return 0;
//*/
    
    printf ("\n\n successfully exit fs_client \n. ***********\n test case involves mounting  3 server alias, opendir 3 aliases  and unmount 3 server alias \n");
    return 0;
}
